#!/bin/zsh
zmodload -Fa zsh/files b:zf_rm
zmodload -Fa zsh/parameter p:funcstack p:functions

typeset -gHa _autocomplete_compdef=()
compdef() {
  _autocomplete_compdef+=( "${(j: :)${(@q+)@}}" )
}

[[ -v functions[_bash_complete] ]] ||
  _bash_complete compgen complete () {
    unfunction _bash_complete compgen complete
    builtin autoload -Uz bashcompinit
    bashcompinit
    bashcompinit() { : }
    ${(%):-%N} "$@"
  }

.autocomplete.compinit.precmd() {
  [[ -z $CDPATH ]] &&
    unset cdpath CDPATH

  # Decrease Oh My Zsh start-up time. See below.
  [[ -v ZSH_COMPDUMP ]] &&
    local -a omzdump=( ${(f)"$( < $ZSH_COMPDUMP )"} )

  typeset -gU FPATH fpath=( ~zsh-autocomplete/completion $fpath[@] )
  typeset -gH _comp_dumpfile=${_comp_dumpfile:-${ZSH_COMPDUMP:-$XDG_CACHE_HOME/zsh/compdump}}

  if [[ -v _comps && $_comps[-command-] != _autocomplete.command ]]; then
    zf_rm -f $_comp_dumpfile
  else
    local -a comps=( ~zsh-autocomplete/completion/_autocomplete.*~*.zwc(N-.) )

    if ! (( $#comps )); then
      print -u2 -- 'zsh-autocomplete: Failed to find completion functions. Aborting.'
      return 66
    fi

    local f; for f in $comps[@]; do
      if ! [[ -v functions[$f:t] && $f -ot $_comp_dumpfile ]]; then
        zf_rm -f $_comp_dumpfile
        break
      fi
    done
  fi

  if ! [[ -v _comp_setup && -f $_comp_dumpfile ]]; then
    unfunction compdef compinit 2>/dev/null
    builtin autoload -Uz compinit
    compinit -C -d $_comp_dumpfile

    # Prevent Oh My Zsh from deleting comp dump file.
    (( $#omzdump > 0 )) &&
      tee -a "$ZSH_COMPDUMP" &>/dev/null <<EOF
$omzdump[-2]
$omzdump[-1]
EOF
  fi

  compinit() { : }

  local args; for args in "$_autocomplete_compdef[@]"; do
    eval "compdef $args"
  done
  unset _autocomplete_compdef

  local -i fd
  exec {fd}< <(
    local cache_dir
    zstyle -s ':completion:*' cache-path cache_dir && () {
      local src bin
      for src in $cache_dir/*~**.zwc~**/.*(N-.); do
        bin=$src.zwc
        if [[ ! -e $bin || $bin -ot $src ]]; then
          zcompile -Uz $src
        fi
      done
    }
  )
  .autocomplete.compinit.zle-f() {
    exec {1}<&-
    zle -F $1 2>/dev/null
    unfunction ${(%):-%N}
  }
  zle -F "$fd" .autocomplete.compinit.zle-f

  compinit() { : }

  .autocomplete.patch _main_complete
  _main_complete() {
    local -i ret=1 _autocomplete__reserved_lines=0

    compstate[insert]=menu  # To get the best output from `_expand` (and some other functions).
    compstate[last_prompt]=yes  # Completion doesn't stay on the same command line without this.
    compstate[list]='list force packed rows' # `_setup` doesn't work well for this.
    unset 'compstate[vared]'

    local +h -a comppostfuncs=( _autocomplete._main_complete.post "$comppostfuncs[@]" )
    {
      # Don't break `_complete_help`, async completion, etc.
      [[ -v functions[compadd] ]] ||
        functions[compadd]=$functions[.autocomplete.compadd]

      .autocomplete._main_complete "$@"
      ret=$?

    } always {
      # Stop `_complete_help` from complaining.
      [[ $WIDGET == _complete_help ]] ||
        unfunction compadd
    }

    return ret
  }

  .autocomplete.compadd() {
    if [[ $_completer == expand* ]]; then
      builtin compadd -fW "${${${words[CURRENT]:#[~/]*}:+$PWD/}:-/}" "$@"
    else
      builtin compadd "$@"
    fi
  }

  _autocomplete._main_complete.post() {
    compstate[list_max]=0
    MENUSCROLL=0
    if (( CURRENT > 1 && compstate[nmatches] > 1 )) && (
          ( [[ $_completer == expand ]] && _autocomplete.is_glob ) ||
          [[ $words[1] != cd &&
            $_comp_tags == *( (|-local)directories | (|(all|globbed)-)files ) ]]
        ); then
      _description all-matches expl 'all matches'
      compadd "$expl[@]" -C &&
        _comp_tags+=' all-matches'
    fi
    _autocomplete.unambiguous
  }

  .autocomplete.patch _expand
  _expand() {
    if _autocomplete.is_glob; then
      [[ $words[CURRENT] == *[^*] && $WIDGET != _complete_help ]] &&
        local ISUFFIX="*"

      .autocomplete._expand "$@"
      return
    fi

    .autocomplete._expand "$@" ||
      return

    (( compstate[nmatches] > 1 )) &&
      return 0

    local exp=${(Q)compstate[unambiguous]} word=$IPREFIX$PREFIX$SUFFIX$ISUFFIX

    [[ $exp == ($word|$compstate[unambiguous]) ]] &&
      return 0

    local expl
    _description -V expansions expl expansions "o:$word"
    compadd "$expl[@]" -UQ -qS '' - "${(q+)exp}"

    return 0
  }

  .autocomplete.patch _complete
  _complete() {
    .autocomplete._complete "$@"
    local -i ret=$?
    (( ret )) &&
      _comp_mesg='' # Otherwise, the next completer won't get tried.

    [[ $compstate[context] == command && CURRENT -eq 1 && -z $PREFIX$SUFFIX ]] &&
      return ret

    _autocomplete.ancestor_dirs "$@"
    _autocomplete.recent_paths "$@"
    return ret
  }

  .autocomplete.patch _approximate
  _approximate() {
    [[ -z $words[CURRENT] || -v compstate[quote] ]] &&
      return 1
    [[ -o banghist && $words[CURRENT] == [$histchars]* ]] &&
      return 1
    _autocomplete.is_glob &&
      return 1

    local -i ret=1
    {
      [[ -v functions[compadd] ]] &&
        functions[.autocomplete.__tmp__]=$functions[compadd]

      compadd() {
        local ppre="$argv[(I)-p]"

        [[ ${argv[(I)-[a-zA-Z]#U[a-zA-Z]#]} -eq 0 &&
          "${#:-$PREFIX$SUFFIX}" -le _comp_correct ]] && return

        if [[ "$PREFIX" = \~* && ( ppre -eq 0 || "$argv[ppre+1]" != \~* ) ]]; then
          PREFIX="~(#a${_comp_correct})${PREFIX[2,-1]}"
        else
          PREFIX="(#a${_comp_correct})$PREFIX"
      fi

        builtin compadd "$@"
      }

      .autocomplete._approximate "$@"
      ret=$?

    } always {
      if [[ -v functions[.autocomplete.__tmp__] ]]; then
        functions[compadd]=$functions[.autocomplete.__tmp__]
        unfunction .autocomplete.__tmp__
      fi
    }
    return ret
  }

  .autocomplete.patch _wanted
  _wanted() {
    if [[ $funcstack == *_parameters* ]] &&
        zstyle -T ":completion:${curcontext}:parameters" verbose; then
      local -a params=( $@[(re)-,-1] )
      shift -p $#params
      shift params
      _description "$@[1,3]"
      builtin compadd "$expl[@]" "$@[5,-1]" -D params -a params
      local -a displays=()
      local sep; zstyle -s ":completion:${curcontext}:parameters" list-separator sep ||
        sep=--
      local MATCH MBEGIN MEND
      zformat -a displays " $sep " \
        "${(@)params[@]:/(#m)*/${MATCH}:${${(kv)${(P)MATCH}}[1,COLUMNS]}}"
      displays=( "${(@)displays[@]//(#m)[^[:print:]]##/${(q+)MATCH}}" )
      displays=( "${(@)displays[@]:/(#m)*/$MATCH[1,COLUMNS]}" )
      .autocomplete._wanted "$@" -d displays -a params
    else
      .autocomplete._wanted "$@"
    fi
  }
}
