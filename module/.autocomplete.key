#!/usr/bin/env zsh
zmodload -Fa zsh/terminfo b:echoti p:terminfo
builtin autoload -Uz add-zle-hook-widget

if [[ -v terminfo[smkx] ]]; then
  .autocomplete.key.set() {
    [[ -n $key[$1] ]] &&
      return
    key[$1]="$terminfo[$3]"
    [[ -z $key[$1] ]] &&
      key[$1]="$2"
  }
else
  .autocomplete.key.set() {
    [[ -n $key[$1] ]] &&
      return
    key[$1]="$2"
  }
fi

if [[ ${(t)key} != association ]]; then
  unset key
  typeset -gA key=()

  # This file can be generated interactively with `autoload -Uz zkbd; zkbd`.
  # See http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Keyboard-Definition
  local zkbd=${ZDOTDIR:-$HOME}/.zkbd/$TERM-$VENDOR
  [[ -r $zkbd ]] &&
    . $zkbd
fi

.autocomplete.key.set Return $'\C-M' cr
.autocomplete.key.set Tab $'\C-I' ht
.autocomplete.key.set Backtab $'\C-[[Z' kcbt
.autocomplete.key.set Up $'\C-[[A' kcuu1
.autocomplete.key.set Down $'\C-[[B' kcud1
.autocomplete.key.set Right $'\C-[[C' kcuf1
.autocomplete.key.set Left $'\C-[[D' kcub1
.autocomplete.key.set End $'\C-[[F' kend
.autocomplete.key.set Home $'\C-[[H' khome
.autocomplete.key.set PageUp $'\C-[[5~' kpp
.autocomplete.key.set PageDown $'\C-[[6~' knp

# These are not defined in `terminfo`.
.autocomplete.key.set Alt $'\C-['
.autocomplete.key.set Control-Space $'\C-@'

.autocomplete.key.precmd() {
  if [[ -v terminfo[smkx] ]]; then
    .autocomplete.key.line-init() {
      echoti smkx
      return 0
    }
    add-zle-hook-widget line-init .autocomplete.key.line-init
    if [[ -v terminfo[rmkx] ]]; then
      .autocomplete.key.line-finish() {
        echoti rmkx
        return 0
      }
      add-zle-hook-widget line-finish .autocomplete.key.line-finish
    fi
  fi
}
